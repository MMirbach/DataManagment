Functions: 
1.	register
	a.	no username, you register with your chat id
2.	remove
	a.	removes your chat id from the db
3.  polls (get)
	a. returns a list of objects, each object is in the format:
	{question: "question string", answers: array of objects { answer: "answer string", count: num } }
	

DB:
1.	Tables:
	a.	Admins(admin_name[str], password[str])
	b.	Users(chat_id[str])
	c.	Polls(poll_id[int], question[str], answers[arr(str)])
	d.	Answers(chat_id[str]:foreign_key, poll_id[int]:foreign_key, answer_index[int]) ---> answer_index is received as a string, and converted into an integer.
	e.	PollMapping(poll_id[int]:foreign_key, telegram_poll_id[str])
2.	Notes:
	a.	When a poll is removed, all poll mappings will be removed. A user might still send a response, so we must add a case for when the telegram_poll_id does not exist.
		We will print a message saying that the poll is no longer active.

Semantics:
1.	/polls (post) expects to get a json that has : 
		{'question': question string, 'answers' : list of answer strings, 'poll_filters': dict of (poll_id, answer_index)}
		at the moment it seems using json.dumps turns the keys to strings so we must return them to integers
2.	In function 'get_matching_chat_ids', arg 'poll_filtering' is a dictionary with poll_id keys and answer_index values.
3.  our run_project file edits a .env file in the react folder with the server port in a variable called
	REACT_APP_SERVER_PORT, we can use it in the frontend using proccess.env.REACT_APP_SERVER_PORT

Notes (TODO):
1.	Consider giving a time limit option to setting a poll (to admin).
3.  Maybe allow the user to switch charts between pie and xy
